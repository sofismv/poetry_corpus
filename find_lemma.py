{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28021eb6-57c4-43e5-b7f3-da885885eec8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from collections import defaultdict\n",
    "import re\n",
    "from tabulate import tabulate\n",
    "import random\n",
    "\n",
    "def load_data():\n",
    "    with open('corpus.json', 'r') as file:\n",
    "        corpus = json.load(file)\n",
    "    \n",
    "    with open('index.json', 'r') as file:\n",
    "        index = json.load(file)\n",
    "    \n",
    "    return corpus, index\n",
    "\n",
    "def count_occurrences(lemma, index):\n",
    "    if lemma in index:\n",
    "        return len(index[lemma])\n",
    "    return 0\n",
    "\n",
    "def prettify_sentence(sentence_tokens, lemma = None):\n",
    "    original_sentence = ''\n",
    "    for word in sentence_tokens:        \n",
    "        original_word = word['word'].lower()\n",
    "\n",
    "        if word['id'] == 1 or word['speech_part'] == \"PROPN\":\n",
    "            original_word = original_word.capitalize()\n",
    "\n",
    "        if lemma and word['lemma'] == lemma:\n",
    "            original_word = f'\\033[91m{original_word}\\033[0m'\n",
    "\n",
    "        \n",
    "        original_sentence += original_word\n",
    "        original_sentence += ' '\n",
    "        \n",
    "    original_sentence = re.sub(r'\\s+([.,!?;:)»])', r'\\1', original_sentence)\n",
    "    original_sentence = re.sub(r'\\(\\s+', '(', original_sentence)\n",
    "    \n",
    "    return original_sentence\n",
    "\n",
    "def find_unique_examples(lemma, corpus, index, max_examples=5):\n",
    "    examples = []\n",
    "    if not index[lemma]:\n",
    "        return None\n",
    "    lemma_examples = index[lemma][:]\n",
    "    random.shuffle(lemma_examples)\n",
    "    \n",
    "    for poem_id, sen_id, word_id in lemma_examples:\n",
    "        sentence = corpus[poem_id]['sentences'][sen_id]\n",
    "        if len(sentence) > 40:\n",
    "            continue\n",
    "        poet = corpus[poem_id]['poet']\n",
    "        title = corpus[poem_id]['title']\n",
    "        examples.append((poet, title, sentence))\n",
    "        if len(examples) >= max_examples:\n",
    "            break\n",
    "    return examples\n",
    "\n",
    "def print_example (lemma, poet, title, sentence):\n",
    "    sentence_text = prettify_sentence(sentence, lemma)\n",
    "\n",
    "    print(f'Поэт: {poet}')\n",
    "    print(f'Название стиха: {title}')\n",
    "    print(f'Предложение: {sentence_text}')\n",
    "    \n",
    "    headers = [\"ID\", \"Word\", \"Lemma\", \"Speech Part\", \"Head ID\", \"Head\", \"Deprel\"]\n",
    "    info = []\n",
    "    for word in sentence:\n",
    "        head_word = sentence[word['head']-1]['word'] if word['head'] > 0 else \"root\"\n",
    "        \n",
    "        if word['lemma'] == lemma:\n",
    "            print(f\"Морфологические признаки: {word['feats']}\")\n",
    "            print(f\"Часть речи: {word['speech_part']}\")\n",
    "\n",
    "        if word['speech_part'] == \"PUNCT\":\n",
    "            continue\n",
    "        \n",
    "        info.append([\n",
    "            word['id'],\n",
    "            word['word'],\n",
    "            word['lemma'],\n",
    "            word['speech_part'],\n",
    "            word['head'],\n",
    "            head_word,\n",
    "            word['deprel']\n",
    "        ])\n",
    "\n",
    "    print(tabulate(info, headers=headers, tablefmt=\"pretty\"))\n",
    "\n",
    "def find_lemma():\n",
    "    while True:\n",
    "        lemma = input(\"Введите лемму (или 'exit' для выхода): \")\n",
    "        if lemma.lower() == 'exit':\n",
    "            print(\"Выход из программы.\")\n",
    "            break\n",
    "        \n",
    "        corpus, index = load_data()\n",
    "        occurrences = count_occurrences(lemma, index)\n",
    "        examples = find_unique_examples(lemma, corpus, index)\n",
    "        \n",
    "        print(f\"\\nКоличество употребления '{lemma}' в корпусе: {occurrences}.\\n\")\n",
    "        \n",
    "        if examples:\n",
    "            for poet, title, example in examples:\n",
    "                print_example(lemma, poet, title, example)\n",
    "        else:\n",
    "            print(\"Нет примеров\")\n",
    "\n",
    "find_lemma()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
